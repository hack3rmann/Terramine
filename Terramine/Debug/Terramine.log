  Camera.cpp
  defines.cpp
  EventHandler.cpp
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\EventHandler.cpp(20,22): warning C4244: +=: преобразование "double" в "float", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\EventHandler.cpp(21,22): warning C4244: +=: преобразование "double" в "float", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\EventHandler.cpp(26,14): warning C4244: =: преобразование "double" в "float", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\EventHandler.cpp(27,14): warning C4244: =: преобразование "double" в "float", возможна потеря данных
  FrameBuffer.cpp
  LineBatch.cpp
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Graphics\LineBatch.cpp(8,47): warning C4244: инициализация: преобразование "unsigned __int64" в "unsigned int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Graphics\LineBatch.cpp(41,29): warning C4244: аргумент: преобразование "unsigned __int64" в "size_t", возможна потеря данных
  MasterHandler.cpp
  SceneHandler.cpp
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Graphics\SceneHandler.cpp(7,37): warning C4244: аргумент: преобразование "double" в "float", возможна потеря данных
  Shader.cpp
  Skybox.cpp
  Texture.cpp
  VoxelRenderer.cpp
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Graphics\VoxelRenderer.cpp(38,63): warning C4244: инициализация: преобразование "unsigned __int64" в "unsigned int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Graphics\VoxelRenderer.cpp(248,32): warning C4244: аргумент: преобразование "unsigned __int64" в "size_t", возможна потеря данных
  Button.cpp
  DynamicText.cpp
  GUI.cpp
  GUIHandler.cpp
  GUIObject.cpp
  Sprite.cpp
  Text.cpp
  pngLoader.cpp
  main.cpp
  Создание кода...
  Компиляция...
  Mesh.cpp
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Mesh.cpp(26,2): warning C4244: аргумент: преобразование "unsigned __int64" в "GLsizeiptr", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Mesh.cpp(32,3): warning C4244: аргумент: преобразование "unsigned __int64" в "GLsizei", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Mesh.cpp(42,3): warning C4244: аргумент: преобразование "unsigned __int64" в "GLsizei", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Mesh.cpp(53,2): warning C4244: аргумент: преобразование "unsigned __int64" в "GLsizeiptr", возможна потеря данных
  Player.cpp
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Player.cpp(19,24): warning C4244: =: преобразование "double" в "float", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Player.cpp(112,22): warning C4244: =: преобразование "double" в "T", возможна потеря данных
          with
          [
              T=float
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Player.cpp(97,65): warning C4390: ";": обнаружен пустой контролируемый оператор; это правильно?
  BlockStore.cpp
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(118,5): error C4996: 'std::iterator<std::random_access_iterator_tag,internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type,ptrdiff_t,internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type*,internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type&>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility(6053,1): message : см. объявление "std::iterator"
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(201): message : выполняется компиляция ссылки на экземпляр класс шаблон функции "rapidjson::GenericMemberIterator<Const,Encoding,Allocator>"
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(110,19): error C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,rapidjson::GenericMember<Encoding,Allocator> *,rapidjson::GenericMember<Encoding,Allocator> &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility(6053,1): message : см. объявление "std::iterator"
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(426): message : выполняется компиляция ссылки на экземпляр класс шаблон функции "rapidjson::GenericMemberIterator<false,Encoding,Allocator>"
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(1720): message : выполняется компиляция ссылки на экземпляр класс шаблон функции "rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>"
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\BlockStore.h(13): message : выполняется компиляция ссылки на экземпляр класс шаблон функции "rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>"
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(118,5): error C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,rapidjson::GenericMember<Encoding,Allocator> *,rapidjson::GenericMember<Encoding,Allocator> &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility(6053,1): message : см. объявление "std::iterator"
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(129,5): error C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,rapidjson::GenericMember<Encoding,Allocator> *,rapidjson::GenericMember<Encoding,Allocator> &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(131,5): error C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,rapidjson::GenericMember<Encoding,Allocator> *,rapidjson::GenericMember<Encoding,Allocator> &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(133,5): error C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,rapidjson::GenericMember<Encoding,Allocator> *,rapidjson::GenericMember<Encoding,Allocator> &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(110,19): error C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,const rapidjson::GenericMember<Encoding,Allocator> *,const rapidjson::GenericMember<Encoding,Allocator> &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility(6053,1): message : см. объявление "std::iterator"
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(427): message : выполняется компиляция ссылки на экземпляр класс шаблон функции "rapidjson::GenericMemberIterator<true,Encoding,Allocator>"
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(118,5): error C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,const rapidjson::GenericMember<Encoding,Allocator> *,const rapidjson::GenericMember<Encoding,Allocator> &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility(6053,1): message : см. объявление "std::iterator"
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(129,5): error C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,const rapidjson::GenericMember<Encoding,Allocator> *,const rapidjson::GenericMember<Encoding,Allocator> &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(131,5): error C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,const rapidjson::GenericMember<Encoding,Allocator> *,const rapidjson::GenericMember<Encoding,Allocator> &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(133,5): error C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,const rapidjson::GenericMember<Encoding,Allocator> *,const rapidjson::GenericMember<Encoding,Allocator> &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
  Chunk.cpp
  Chunks.cpp
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(9,22): warning C4244: инициализация: преобразование "unsigned __int64" в "unsigned int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(31,39): warning C4018: >=: несоответствие типов со знаком и без знака
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(31,50): warning C4018: >=: несоответствие типов со знаком и без знака
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(31,61): warning C4018: >=: несоответствие типов со знаком и без знака
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(40,35): warning C4018: >=: несоответствие типов со знаком и без знака
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(40,45): warning C4018: >=: несоответствие типов со знаком и без знака
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(40,55): warning C4018: >=: несоответствие типов со знаком и без знака
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(51,39): warning C4018: >=: несоответствие типов со знаком и без знака
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(51,50): warning C4018: >=: несоответствие типов со знаком и без знака
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(51,61): warning C4018: >=: несоответствие типов со знаком и без знака
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(78,9): warning C4244: инициализация: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(79,9): warning C4244: инициализация: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(80,9): warning C4244: инициализация: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(109,13): warning C4244: =: преобразование "int" в "T", возможна потеря данных
          with
          [
              T=float
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(110,13): warning C4244: =: преобразование "int" в "T", возможна потеря данных
          with
          [
              T=float
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(111,13): warning C4244: =: преобразование "int" в "T", возможна потеря данных
          with
          [
              T=float
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(121,11): warning C4244: +=: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(126,11): warning C4244: +=: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(133,11): warning C4244: +=: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(138,11): warning C4244: +=: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(145,11): warning C4244: =: преобразование "int" в "T", возможна потеря данных
          with
          [
              T=float
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(146,11): warning C4244: =: преобразование "int" в "T", возможна потеря данных
          with
          [
              T=float
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(147,11): warning C4244: =: преобразование "int" в "T", возможна потеря данных
          with
          [
              T=float
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(165,9): warning C4244: инициализация: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(166,9): warning C4244: инициализация: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(167,9): warning C4244: инициализация: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(208,11): warning C4244: +=: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(213,11): warning C4244: +=: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(220,11): warning C4244: +=: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(225,11): warning C4244: +=: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(252,9): warning C4244: инициализация: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(253,9): warning C4244: инициализация: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(254,9): warning C4244: инициализация: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(287,11): warning C4244: +=: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(292,11): warning C4244: +=: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(299,11): warning C4244: +=: преобразование "float" в "int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Chunks.cpp(304,11): warning C4244: +=: преобразование "float" в "int", возможна потеря данных
  Terrarian.cpp
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Terrarian.cpp(46,27): warning C4244: инициализация: преобразование "unsigned __int64" в "unsigned int", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Terrarian.cpp(62,10): warning C4244: инициализация: преобразование "unsigned int" в "float", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Terrarian.cpp(63,7): warning C4244: инициализация: преобразование "unsigned int" в "float", возможна потеря данных
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\Terrarian.cpp(64,7): warning C4244: инициализация: преобразование "unsigned int" в "float", возможна потеря данных
  Voxel.cpp
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(118,5): error C4996: 'std::iterator<std::random_access_iterator_tag,internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type,ptrdiff_t,internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type*,internal::MaybeAddConst<Const,rapidjson::GenericMember<Encoding,Allocator>>::Type&>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility(6053,1): message : см. объявление "std::iterator"
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(201): message : выполняется компиляция ссылки на экземпляр класс шаблон функции "rapidjson::GenericMemberIterator<Const,Encoding,Allocator>"
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(110,19): error C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,rapidjson::GenericMember<Encoding,Allocator> *,rapidjson::GenericMember<Encoding,Allocator> &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility(6053,1): message : см. объявление "std::iterator"
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(426): message : выполняется компиляция ссылки на экземпляр класс шаблон функции "rapidjson::GenericMemberIterator<false,Encoding,Allocator>"
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(1720): message : выполняется компиляция ссылки на экземпляр класс шаблон функции "rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>"
D:\Svyatoslav\Projects\TerramineDevPreview\Terramine\Voxels\BlockStore.h(13): message : выполняется компиляция ссылки на экземпляр класс шаблон функции "rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>"
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(118,5): error C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,rapidjson::GenericMember<Encoding,Allocator> *,rapidjson::GenericMember<Encoding,Allocator> &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility(6053,1): message : см. объявление "std::iterator"
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(129,5): error C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,rapidjson::GenericMember<Encoding,Allocator> *,rapidjson::GenericMember<Encoding,Allocator> &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(131,5): error C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,rapidjson::GenericMember<Encoding,Allocator> *,rapidjson::GenericMember<Encoding,Allocator> &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(133,5): error C4996: 'std::iterator<std::random_access_iterator_tag,rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,rapidjson::GenericMember<Encoding,Allocator> *,rapidjson::GenericMember<Encoding,Allocator> &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(110,19): error C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,const rapidjson::GenericMember<Encoding,Allocator> *,const rapidjson::GenericMember<Encoding,Allocator> &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility(6053,1): message : см. объявление "std::iterator"
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(427): message : выполняется компиляция ссылки на экземпляр класс шаблон функции "rapidjson::GenericMemberIterator<true,Encoding,Allocator>"
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(118,5): error C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,const rapidjson::GenericMember<Encoding,Allocator> *,const rapidjson::GenericMember<Encoding,Allocator> &>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility(6053,1): message : см. объявление "std::iterator"
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(129,5): error C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,const rapidjson::GenericMember<Encoding,Allocator> *,const rapidjson::GenericMember<Encoding,Allocator> &>::pointer': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(131,5): error C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,const rapidjson::GenericMember<Encoding,Allocator> *,const rapidjson::GenericMember<Encoding,Allocator> &>::reference': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
D:\Svyatoslav\Projects\TerramineDevPreview\packages\rapidjson.1.0.2\build\native\include\rapidjson\document.h(133,5): error C4996: 'std::iterator<std::random_access_iterator_tag,const rapidjson::GenericMember<Encoding,Allocator>,ptrdiff_t,const rapidjson::GenericMember<Encoding,Allocator> *,const rapidjson::GenericMember<Encoding,Allocator> &>::difference_type': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.
          with
          [
              Encoding=rapidjson::UTF8<char>,
              Allocator=rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>
          ]
  Window.cpp
  Создание кода...
